name: Deploy Docker Image to EC2

on:
  workflow_dispatch:
    inputs:
      db_name:
        description: "Database Name"
        required: true
      image_tag:
        description: "Image Tag (e.g., latest, v1.2.3)"
        required: true

jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Verify EC2 Connectivity
        run: |
          echo "Testing connection to ${{ secrets.POSTGRES_HOST }}..."
          nc -zv ${{ secrets.POSTGRES_HOST }} 22
          echo "Connection test passed."

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.POSTGRES_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          timeout: 30s
          script: |
            # First verify key was properly passed
            mkdir -p ~/.ssh
            echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/deploy_key
            chmod 600 ~/.ssh/deploy_key
            ssh-keyscan ${{ secrets.POSTGRES_HOST }} >> ~/.ssh/known_hosts
                  
            # Test connection
            ssh -i ~/.ssh/deploy_key ubuntu@${{ secrets.POSTGRES_HOST }} echo "SSH connection successful!"

            echo "Installing Docker..."
            sudo apt-get update
            sudo apt-get install -y docker.io
            sudo systemctl start docker
            echo "Docker version:"
            sudo docker --version

            echo "Logging into GitHub Container Registry (GHCR)..."
            echo "${{ secrets.GITHUB_TOKEN }}" | sudo docker login ghcr.io -u ${{ github.actor }} --password-stdin

            IMAGE="ghcr.io/hareeshkhs/liquibase-schema-manager::${{ github.event.inputs.image_tag }}"
            CONTAINER_NAME="schema-manager"

            # echo "Removing existing container if exists..."
            # sudo docker rm -f $CONTAINER_NAME || true

            echo "Pulling image $IMAGE..."
            sudo docker pull $IMAGE

            echo "Running container $CONTAINER_NAME..."
            sudo docker run -it --rm -e POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} -e POSTGRES_DB=${{ github.event.inputs.db_name }} -e POSTGRES_USER=${{ secrets.POSTGRES_USER }} -e POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} -e EMAIL_APP_PASSCODE=${{ secrets.EMAIL_APP_PASSCODE }} $IMAGE

            # # Check if the container started successfully
            # sudo docker ps -a | grep $CONTAINER_NAME
            # sudo docker logs $CONTAINER_NAME
